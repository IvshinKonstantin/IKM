#include <iostream>
#include <windows.h>

long long gcd(long long a, long long b) {
    // Алгоритм Евклида для нахождения НОД с выводом делений
    std::cout << "Вычисление НОД:\n";
    while (b != 0) {
        long long t = b;
        std::cout << "a: " << a << ", b: " << b << " -> ";
        b = a % b;
        a = t;
        std::cout << "НОД: " << a << " (новое значение b: " << b << ")\n";
    }
    return a;
}

bool areCoprime(long long m, long long n) {
    // Проверяем, равен ли НОД 1
    return gcd(m, n) == 1;
}

void explainCoprimality(long long m, long long n, bool coprime) {
    if (coprime) {
        std::cout << "Числа " << m << " и " << n << " являются взаимно простыми.\n";
        std::cout << "Это означает, что у них нет ни одного общего делителя, кроме ±1.\n";
        std::cout << "Другими словами, их НОД равен 1.\n";
    }
    else {
        std::cout << "Числа " << m << " и " << n << " не являются взаимно простыми.\n";
        std::cout << "Это означает, что у них есть хотя бы один общий делитель, отличный от ±1.\n";
        std::cout << "Следовательно, их НОД больше 1.\n";
    }
}

int main() {
    setlocale(LC_ALL, "RU");
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    long long m, n;

    // Вводим числа
    std::cout << "Введите целые числа m и n (m, n > 100_000_000_000): " << std::endl;
    std::cin >> m >> n;

    // Проверяем, что числа удовлетворяют условию
    if (m <= 100000000000LL || n <= 100000000000LL) {
        std::cout << "Оба числа должны быть > 10^11." << std::endl;
        return 1;
    }

    // Проверяем, являются ли числа взаимно простыми
    bool coprime = areCoprime(m, n);
    explainCoprimality(m, n, coprime);

    return 0;
}
